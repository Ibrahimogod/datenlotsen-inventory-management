// <auto-generated />
using System;
using Datenlotsen.InventoryManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Datenlotsen.InventoryManagement.Data.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20250521052320_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Datenlotsen.InventoryManagement.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0f13d5f-b34b-4134-a09e-f8b559c2e07d"),
                            CreatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5174),
                            Name = "Beverages - Alcoholic",
                            UpdatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5175)
                        },
                        new
                        {
                            Id = new Guid("ea2f8cd9-990b-4f1a-b5e3-c62f405c43ed"),
                            CreatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5178),
                            Name = "Snacks",
                            UpdatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5179)
                        },
                        new
                        {
                            Id = new Guid("1d30f3d1-9b44-42b0-ae88-1d88774762e0"),
                            CreatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5180),
                            Name = "Fruits",
                            UpdatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5181)
                        },
                        new
                        {
                            Id = new Guid("38844051-c658-48c2-9fa6-3aa0e4378df2"),
                            CreatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5183),
                            Name = "Vegetables",
                            UpdatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5183)
                        },
                        new
                        {
                            Id = new Guid("ee65850e-861c-445f-99a3-a794c72a7c2c"),
                            CreatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5185),
                            Name = "Dairy",
                            UpdatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5185)
                        },
                        new
                        {
                            Id = new Guid("46cfc137-f3d7-482a-b2a7-4d124b910a83"),
                            CreatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5187),
                            Name = "Meat",
                            UpdatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5187)
                        },
                        new
                        {
                            Id = new Guid("0b705731-1ba7-43da-8bfa-380f0709eea6"),
                            CreatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5198),
                            Name = "Seafood",
                            UpdatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5198)
                        },
                        new
                        {
                            Id = new Guid("01a5b6ab-91ef-4c92-903d-3e2a9af332fd"),
                            CreatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5200),
                            Name = "Grains",
                            UpdatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5200)
                        },
                        new
                        {
                            Id = new Guid("d6374f57-090e-4ebb-a254-c3f8ff6d8241"),
                            CreatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5202),
                            Name = "Condiments",
                            UpdatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5202)
                        },
                        new
                        {
                            Id = new Guid("2c0e21b5-6817-437c-a3db-aa7ca32ce124"),
                            CreatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5204),
                            Name = "Baking",
                            UpdatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5204)
                        },
                        new
                        {
                            Id = new Guid("b697caf5-3756-4af6-bfb9-e9c32b5180d4"),
                            CreatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5206),
                            Name = "Frozen Foods",
                            UpdatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5206)
                        },
                        new
                        {
                            Id = new Guid("68172734-18b4-4e8d-8ec9-82f7c73570d9"),
                            CreatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5208),
                            Name = "Canned Foods",
                            UpdatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5208)
                        },
                        new
                        {
                            Id = new Guid("35a82aa2-9891-417e-833e-846371aca063"),
                            CreatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5210),
                            Name = "Packaged Foods",
                            UpdatedAt = new DateTime(2025, 5, 21, 5, 23, 20, 25, DateTimeKind.Utc).AddTicks(5211)
                        });
                });

            modelBuilder.Entity("Datenlotsen.InventoryManagement.Data.Models.InventoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("StockQuantity")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("Datenlotsen.InventoryManagement.Data.Models.InventoryItem", b =>
                {
                    b.HasOne("Datenlotsen.InventoryManagement.Data.Models.Category", "Category")
                        .WithMany("InventoryItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Datenlotsen.InventoryManagement.Data.Models.Category", b =>
                {
                    b.Navigation("InventoryItems");
                });
#pragma warning restore 612, 618
        }
    }
}
