name: Release WPF App and Docker Image

on:
  workflow_dispatch:
  push:
    tags:
      - '*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-api

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
        version: ${{ steps.set_version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set VERSION variable
      id: set_version
      run: |
        if [[ "${GITHUB_REF_TYPE}" == "tag" && -n "${GITHUB_REF_NAME}" ]]; then
        VERSION="${GITHUB_REF_NAME}"
        else
        VERSION=$(git fetch --tags && git describe --tags `git rev-list --tags --max-count=1`)
        fi
        echo "VERSION=$VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT


  build-wpf:
    runs-on: windows-latest
    permissions:
        contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore Datenlotsen.WPF/Datenlotsen.WPF.csproj

      - name: Build WPF app
        run: dotnet publish Datenlotsen.WPF/Datenlotsen.WPF.csproj -c Release -o publish

      - name: Upload WPF artifact
        uses: actions/upload-artifact@v4
        with:
          name: Datenlotsen
          path: publish/**

  build-docker:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.prepare.outputs.version }}
            type=sha,prefix=,format=short
          labels: |
            org.opencontainers.image.author=ibadr
            org.opencontainers.image.maintainer=ibadr
            org.opencontainers.image.title=Datenlotsen Inventory Management API
            org.opencontainers.image.description=Inventory Management service for Datenlotsen
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ needs.prepare.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Datenlotsen.InventoryManagement.API/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  create-release:
    runs-on: windows-latest
    needs: [build-wpf, build-docker]
    steps:
      - name: Download published app artifact
        uses: actions/download-artifact@v4
        with:
          name: Datenlotsen
          path: ./release

      - name: List release contents
        run: ls -l ./release
        shell: pwsh

      - name: Create ZIP of published app
        run: Compress-Archive -Path ./release/* -DestinationPath ${{ github.workspace }}/Datenlotsen.zip
        shell: pwsh
          
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Determine VERSION
        id: get_version
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME}"
          else
            VERSION=$(git fetch --tags && git describe --tags `git rev-list --tags --max-count=1`)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: List workspace contents
        run: |
          ls ${{ github.workspace }}
        shell: pwsh

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ github.workspace }}/Datenlotsen.zip
          tag_name: ${{ needs.prepare.outputs.version }}
          name: Release ${{ needs.prepare.outputs.version }}
          body: |
            ## WPF Application Release
            Download the ZIP file below, extract it, and run `Datenlotsen.WPF.exe` to start the application.

            ## Docker Image
            The latest Docker image is available at:
            ```bash
            ghcr.io/${{ github.repository }}-api:latest
            ```
            ### Pull the Image
            ```bash
            docker pull ghcr.io/${{ github.repository }}-api:latest
            ```
            ### Run the Container
            ```bash
            docker run -d \
              -p 5155:8080 \
              -e ASPNETCORE_ENVIRONMENT=Production \
              ghcr.io/${{ github.repository }}-api:${{ needs.prepare.outputs.version }}
            ```
            See the [README.md](https://github.com/${{ github.repository }}/blob/main/README.md) for more details.
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}